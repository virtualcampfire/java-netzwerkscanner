import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Main {

    private TaskManager taskManager;
    private DeviceManager deviceManager;

    public TaskManager getTaskManager() {
        return taskManager;
    }

    public DeviceManager getDeviceManager() {
        return deviceManager;
    }

    public Device[] getAllDevices() {
        return deviceManager.getDevices();
    }

    public void newDevice(String ip, String mac) {
        deviceManager.addDevice(ip, mac); // Sie müssen die Methode addDevice entsprechend implementieren
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Network Scanner");
            JButton button = new JButton("Scan Network");
            DefaultListModel<String> listModel = new DefaultListModel<>();
            JList<String> list = new JList<>(listModel);
            JLabel loadingLabel = new JLabel("Loading...");
            loadingLabel.setHorizontalAlignment(JLabel.CENTER);
            loadingLabel.setVisible(false);

            list.setCellRenderer(new DefaultListCellRenderer() {
                @Override
                public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                        boolean isSelected,
                        boolean cellHasFocus) {
                    Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                    if (value.toString().contains("Open")) {
                        c.setForeground(Color.GREEN);
                    } else if (value.toString().contains("Closed")) {
                        c.setForeground(Color.RED);
                    } else {
                        c.setForeground(Color.BLACK);
                    }
                    return c;
                }
            });

            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    listModel.clear();
                    loadingLabel.setVisible(true);
                    SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            ExecutorService executor = Executors.newFixedThreadPool(20);
                            InetAddress ip = InetAddress.getLocalHost();
                            String subnet = ip.getHostAddress().substring(0, ip.getHostAddress().lastIndexOf("."));
                            for (int i = 1; i < 255; i++) {
                                final int j = i;
                                executor.submit(() -> {
                                    String host = subnet + "." + j;
                                    try {
                                        if (InetAddress.getByName(host).isReachable(1000)) {
                                            String portStatus = "Closed";
                                            try (Socket socket = new Socket()) {
                                                socket.connect(new InetSocketAddress(host, 8081), 1000);
                                                portStatus = "Open";
                                                deviceManager.newDevice(host, "sampleMAC"); // Fügen Sie das Gerät zum
                                                                                            // DeviceManager hinzu
                                            } catch (Exception ignored) {
                                            }
                                            listModel.addElement("IP " + host + " Port 8081 " + portStatus);
                                        }
                                    } catch (Exception ex) {
                                        ex.printStackTrace();
                                    }
                                });
                            }
                            executor.shutdown();
                            while (!executor.isTerminated()) {
                            }
                            return null;
                        }

                        @Override
                        protected void done() {
                            listModel.addElement("END of Scan");
                            loadingLabel.setVisible(false);
                            System.out.println(main.getAllDevices());
                        }
                    };
                    worker.execute();
                }
            });

            frame.add(new JScrollPane(list), BorderLayout.CENTER);
            frame.add(button, BorderLayout.SOUTH);
            frame.add(loadingLabel, BorderLayout.NORTH);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(400, 300);
            frame.setMinimumSize(new Dimension(400, 300));
            frame.setVisible(true);
        });
    }
}
